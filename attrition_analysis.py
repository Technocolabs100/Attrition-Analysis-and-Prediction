# -*- coding: utf-8 -*-
"""Attrition_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V39uEETmBfCNyf4HHVHZBQ_9kf25GEh2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

employee_data = pd.read_csv('/content/WA_Fn-UseC_-HR-Employee-Attrition.csv')

employee_data.head()

employee_data.isnull().sum()

employee_data.duplicated().sum()

employee_data['EducationField']

from sklearn.preprocessing import LabelEncoder

# Identifying categorical columns
categorical_columns = employee_data.select_dtypes(include=['object']).columns
categorical_columns

# Label Encoding binary categorical columns
label_encodable_cols = ['Attrition']
label_encoder = LabelEncoder()
for col in label_encodable_cols:
    employee_data[col] = label_encoder.fit_transform(employee_data[col])
employee_data.head()

# Identify numerical columns
numerical_columns = employee_data.select_dtypes(include=['float64', 'int64']).columns
numerical_columns



def detect_outliers_iqr(employee_data):
  outliers = pd.DataFrame(columns=employee_data.columns)
  for column in employee_data.select_dtypes(include=[np.number]).columns:  # Only apply to numerical columns
    Q1 = employee_data[column].quantile(0.25)
    Q3 = employee_data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outlier_condition = (employee_data[column] < lower_bound) | (employee_data[column] > upper_bound)

    outliers = pd.concat([outliers, employee_data[outlier_condition]])
  return outliers

# Identify outliers in the dataset
outliers = detect_outliers_iqr(employee_data)

# Display the outliers
outliers

pd.DataFrame(columns=employee_data.columns)

outliers

employee_data

employee_data.describe()



numerical_column = employee_data.select_dtypes(include=['float64', 'int64']).columns
numerical_column

employee_data_num = employee_data[employee_data.select_dtypes(include=[np.number]).columns]
employee_data_num





corr = employee_data_num.corr()

# Create a heat map
plt.figure(figsize=(15, 10))
sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heat Map of Employee Data')
plt.show()

